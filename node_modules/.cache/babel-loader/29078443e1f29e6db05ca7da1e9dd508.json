{"ast":null,"code":"var _jsxFileName = \"/home/yuri/Freelance/Clients/Cheil/seace-qa/src/MapScreen.tsx\";\n/// @ts-nocheck\nimport React, { useState, useEffect, Fragment } from 'react';\nimport './MapScreen.css';\nimport { Filter } from './components/MapFilter';\nimport { MapLegend } from './components/MapLegend';\nimport { MapRegionIndicator } from './components/MapRegionIndicator';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\";\nimport { ReactComponent as Home } from \"@svgr/webpack?-svgo,+titleProp,+ref!./home.svg\";\nimport { ReactComponent as Biz } from \"@svgr/webpack?-svgo,+titleProp,+ref!./biz.svg\";\nimport { ReactComponent as Both } from \"@svgr/webpack?-svgo,+titleProp,+ref!./both.svg\";\n\nconst {\n  GoogleSpreadsheet\n} = require('google-spreadsheet');\n\nconst doc = new GoogleSpreadsheet('1QtCGUCN-_xZPLYExN3btHeXphRi4VI-uGABA87cHj-M');\nconst REGION_TO_SHEET_MAP = {\n  'Spain': 1,\n  'Sweden': 2,\n  'Denmark': 3,\n  'Finland': 4,\n  'Italy': 5,\n  'Norway': 6,\n  'SEROM': 7,\n  'France': 8,\n  'UK': 9,\n  'Greece': 10,\n  'Poland': 11,\n  'Czech & Slovakia': 12,\n  'Portugal': 13,\n  'Hungary': 14,\n  'SEAD': 15,\n  'SEB': 16\n};\n\nfunction MapScreen() {\n  const [region, setRegion] = useState('UK');\n  const [companies, setCompanies] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [searchLocation, setSearchLocation] = useState({\n    lat: 50.8742724,\n    lon: 0.6619475\n  });\n  const [activePlace, setActivePlace] = useState();\n  const mapRef = React.createRef();\n\n  const fetchGoogleSheet = async () => {\n    await doc.useServiceAccountAuth(require('./SEACE Installer Locator-5a80e6b026be.json'));\n  }; // const onSearch = async (query: string) => {\n  //   const point = {lat: 51.5287714, lon: -0.2420237}\n  //   // const point = GMaps.getLocation(query)\n  // }\n\n\n  const fetchCompaniesForRegion = async region => {\n    try {\n      setLoading(true);\n      await doc.loadInfo();\n      const sheet = doc.sheetsByIndex[REGION_TO_SHEET_MAP[region]];\n      const rows = await sheet.getRows();\n      setCompanies(rows);\n      console.log(rows);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      console.error(error);\n    }\n  }; // Only once\n\n\n  useEffect(() => {\n    fetchGoogleSheet();\n  }); // Every region change\n\n  useEffect(() => {\n    fetchCompaniesForRegion(region);\n  }, [region]);\n  const MyMapComponent = withScriptjs(withGoogleMap(props => /*#__PURE__*/React.createElement(GoogleMap, {\n    defaultZoom: 8,\n    defaultCenter: {\n      lat: 51.8266266,\n      lng: -2.2714084\n    },\n    ref: mapRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, companies && companies.map(c => {\n    const productType = String(c['Product Type']).toLowerCase();\n    const position = {\n      lat: parseFloat(String(c['Latitude'])),\n      lng: parseFloat(String(c['Longitude']))\n    };\n    const installerType = String(c['Installer Type']); // Select icon based on the installer type\n\n    let icon;\n\n    if (installerType === 'For home') {\n      icon = /*#__PURE__*/React.createElement(Home, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 20\n        }\n      });\n    } else if (installerType === 'For business') {\n      icon = /*#__PURE__*/React.createElement(Biz, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 20\n        }\n      });\n    } else {\n      icon = /*#__PURE__*/React.createElement(Both, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Marker, {\n      position: position,\n      onClick: () => {\n        mapRef.current.panTo({\n          lat: parseFloat(String(c['Latitude'])),\n          lng: parseFloat(String(c['Longitude']))\n        });\n        setActivePlace(c['Company name']);\n      } // icon={{url: `data:image/svg+xml,${encodeURIComponent(renderToStaticMarkup(icon))}`}}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 16\n      }\n    }, activePlace && activePlace === c['Company name'] && /*#__PURE__*/React.createElement(InfoWindow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, c['Company name']), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, c['Street Address']), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, c['City']), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, c['Installer Type']), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }, c['Website']), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, \"Contact Name: \", c['Contact Name']), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, c['Email']), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, c['Phone number']))));\n  }))));\n  return (\n    /*#__PURE__*/\n\n    /*<div className=\"map-screen\">*/\n\n    /* <iframe\n      width=\"100%\"\n      height=\"100%\"\n      style={{border:0}}\n      src=\"https://www.google.com/maps/embed/v1/place?key=API_KEY\n        &q=Space+Needle,Seattle+WA\">\n    </iframe> */\n\n    /* <GoogleMapReact\n      bootstrapURLKeys={{ key: 'gme-samsungsds' }}\n      defaultCenter={{lat: 59.95, lng: 30.33}}\n      defaultZoom={11}\n    > */\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MyMapComponent, {\n      className: \"map-screen\",\n      isMarkerShown: true,\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\",\n      loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100%`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 27\n        }\n      }),\n      containerElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100vh`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 29\n        }\n      }),\n      mapElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100%`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 23\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Filter, {\n      onSubmit: () => {},\n      loading: loading,\n      companies: companies,\n      searchLocation: searchLocation,\n      mapRef: mapRef,\n      setActivePlace: setActivePlace,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(MapLegend, {\n      isOpened: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(MapRegionIndicator, {\n      region: region,\n      setRegion: setRegion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }))\n  );\n}\n\nexport default MapScreen;","map":{"version":3,"sources":["/home/yuri/Freelance/Clients/Cheil/seace-qa/src/MapScreen.tsx"],"names":["React","useState","useEffect","Fragment","Filter","MapLegend","MapRegionIndicator","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","GoogleSpreadsheet","require","doc","REGION_TO_SHEET_MAP","MapScreen","region","setRegion","companies","setCompanies","loading","setLoading","searchLocation","setSearchLocation","lat","lon","activePlace","setActivePlace","mapRef","createRef","fetchGoogleSheet","useServiceAccountAuth","fetchCompaniesForRegion","loadInfo","sheet","sheetsByIndex","rows","getRows","console","log","error","MyMapComponent","props","lng","map","c","productType","String","toLowerCase","position","parseFloat","installerType","icon","current","panTo","height"],"mappings":"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","sourcesContent":["/// @ts-nocheck\nimport React, { useState, useEffect, Fragment } from 'react';\nimport './MapScreen.css';\nimport { Filter } from './components/MapFilter'\nimport { MapLegend } from './components/MapLegend'\nimport { MapRegionIndicator } from './components/MapRegionIndicator';\nimport { CompanyLayout, LocationLayout } from './interfaces';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\"\nimport {ReactComponent as Home} from './home.svg';\nimport {ReactComponent as Biz} from './biz.svg';\nimport {ReactComponent as Both} from './both.svg';\nimport { renderToStaticMarkup } from 'react-dom/server';\n\nconst { GoogleSpreadsheet } = require('google-spreadsheet');\n \nconst doc = new GoogleSpreadsheet('1QtCGUCN-_xZPLYExN3btHeXphRi4VI-uGABA87cHj-M');\n\nconst REGION_TO_SHEET_MAP = {\n  'Spain': 1,\n  'Sweden': 2,\n  'Denmark': 3,\n  'Finland': 4,\n  'Italy': 5,\n  'Norway': 6,\n  'SEROM': 7,\n  'France': 8,\n  'UK': 9,\n  'Greece': 10,\n  'Poland': 11,\n  'Czech & Slovakia': 12,\n  'Portugal': 13,\n  'Hungary': 14,\n  'SEAD': 15,\n  'SEB': 16\n}\n\nfunction MapScreen() {\n  const [region, setRegion] = useState<string>('UK');\n  const [companies, setCompanies] = useState<Array<CompanyLayout> | null>(null)\n  const [loading, setLoading] = useState<boolean>(false);\n  const [searchLocation, setSearchLocation] = useState<LocationLayout | null>({lat: 50.8742724, lon: 0.6619475})\n  const [activePlace, setActivePlace] = useState<string | null>();\n\n  const mapRef = React.createRef<React.RefObject<GoogleMap>>();\n  const fetchGoogleSheet = async () => {\n    await doc.useServiceAccountAuth(require('./SEACE Installer Locator-5a80e6b026be.json'));\n  }\n\n  // const onSearch = async (query: string) => {\n  //   const point = {lat: 51.5287714, lon: -0.2420237}\n  //   // const point = GMaps.getLocation(query)\n  // }\n\n  const fetchCompaniesForRegion = async (region: string) => {\n    try {\n      setLoading(true);\n      await doc.loadInfo();\n      const sheet = doc.sheetsByIndex[REGION_TO_SHEET_MAP[region]]\n      const rows = await sheet.getRows();\n      setCompanies(rows);\n      console.log(rows);\n      \n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      console.error(error);\n    }\n  }\n\n  // Only once\n  useEffect(() => {fetchGoogleSheet()});\n\n  // Every region change\n  useEffect(() => {\n    fetchCompaniesForRegion(region);\n  }, [region]);\n\n  const MyMapComponent = withScriptjs(withGoogleMap((props) =>\n    <GoogleMap\n      defaultZoom={8}\n      defaultCenter={{ lat: 51.8266266, lng: -2.2714084 }}\n      ref={mapRef}\n    >\n      {companies && companies.map(c => {\n        const productType = String(c['Product Type']).toLowerCase();\n        const position = { lat: parseFloat(String(c['Latitude'])), lng: parseFloat(String(c['Longitude'])) };\n        const installerType = String(c['Installer Type'])\n       \n        // Select icon based on the installer type\n        let icon;\n        if (installerType === 'For home') {\n            icon = <Home />;\n        } else if (installerType === 'For business') {\n            icon = <Biz />;\n        } else {\n            icon = <Both />;\n        }\n\n        return <Marker \n          position={position} \n          onClick={() =>{\n            mapRef.current.panTo({ lat: parseFloat(String(c['Latitude'])), lng: parseFloat(String(c['Longitude'])) });\n            setActivePlace(c['Company name']);\n          }}\n          // icon={{url: `data:image/svg+xml,${encodeURIComponent(renderToStaticMarkup(icon))}`}}\n        >\n          {/* If this place is active, show the popup with the place information */}\n          {activePlace && activePlace === c['Company name'] &&\n            <InfoWindow>\n              <Fragment>\n                <p>{c['Company name']}</p>\n                <p>{c['Street Address']}</p>\n                <p>{c['City']}</p>\n                <p>{c['Installer Type']}</p>\n                <p>{c['Website']}</p>\n                <p>Contact Name: {c['Contact Name']}</p>\n                <p>{c['Email']}</p>\n                <p>{c['Phone number']}</p>\n              </Fragment>\n            </InfoWindow>\n          }\n          \n        </Marker>\n      })}\n      {/* <Marker position={{ lat: 51.8266266, lng: 150.644 }} /> */}\n    </GoogleMap>\n  ))\n\n  return (\n    /*<div className=\"map-screen\">*/\n      /* <iframe\n        width=\"100%\"\n        height=\"100%\"\n        style={{border:0}}\n        src=\"https://www.google.com/maps/embed/v1/place?key=API_KEY\n          &q=Space+Needle,Seattle+WA\">\n      </iframe> */\n      /* <GoogleMapReact\n        bootstrapURLKeys={{ key: 'gme-samsungsds' }}\n        defaultCenter={{lat: 59.95, lng: 30.33}}\n        defaultZoom={11}\n      > */\n      <div>\n        <MyMapComponent\n          className=\"map-screen\"\n          isMarkerShown={true}\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\n          loadingElement={<div style={{ height: `100%` }} />}\n          containerElement={<div style={{ height: `100vh` }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n        >\n        </MyMapComponent>\n        <Filter onSubmit={() => {}} loading={loading} companies={companies} searchLocation={searchLocation} mapRef={mapRef} setActivePlace={setActivePlace}/>\n        <MapLegend isOpened={true}/>\n        <MapRegionIndicator region={region} setRegion={setRegion}/>\n      </div>\n  );\n}\n\nexport default MapScreen;"]},"metadata":{},"sourceType":"module"}