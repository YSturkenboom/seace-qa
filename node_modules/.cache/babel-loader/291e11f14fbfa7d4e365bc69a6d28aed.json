{"ast":null,"code":"var _jsxFileName = \"/home/yuri/Freelance/Clients/Cheil/seace-qa/src/MapScreen.tsx\";\n/// @ts-nocheck\nimport React, { useState, useEffect } from 'react';\nimport './MapScreen.css';\nimport { Filter } from './components/MapFilter';\nimport { MapLegend } from './components/MapLegend';\nimport { MapRegionIndicator } from './components/MapRegionIndicator';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\n\nconst {\n  GoogleSpreadsheet\n} = require('google-spreadsheet');\n\nconst doc = new GoogleSpreadsheet('1QtCGUCN-_xZPLYExN3btHeXphRi4VI-uGABA87cHj-M');\nconst REGION_TO_SHEET_MAP = {\n  'uk': 9\n};\n\nfunction MapScreen() {\n  const [region, setRegion] = useState('uk');\n  const [companies, setCompanies] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [searchLocation, setSearchLocation] = useState({\n    lat: 50.8742724,\n    lon: 0.6619475\n  });\n\n  const fetchGoogleSheet = async () => {\n    await doc.useServiceAccountAuth(require('./SEACE Installer Locator-5a80e6b026be.json'));\n  }; // const onSearch = async (query: string) => {\n  //   const point = {lat: 51.5287714, lon: -0.2420237}\n  //   // const point = GMaps.getLocation(query)\n  // }\n\n\n  const fetchCompaniesForRegion = async region => {\n    try {\n      setLoading(true);\n      await doc.loadInfo();\n      console.log(doc.title);\n      const sheet = doc.sheetsByIndex[REGION_TO_SHEET_MAP['uk']];\n      const rows = await sheet.getRows();\n      setCompanies(rows);\n      console.log(rows);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      console.error(error);\n    }\n  }; // Only once\n\n\n  useEffect(() => {\n    fetchGoogleSheet();\n  }); // Every region change\n\n  useEffect(() => {\n    fetchCompaniesForRegion(region);\n  }, [region]);\n  const MyMapComponent = withScriptjs(withGoogleMap(props => /*#__PURE__*/React.createElement(GoogleMap, {\n    defaultZoom: 8,\n    defaultCenter: {\n      lat: 51.8266266,\n      lng: -2.2714084\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, companies && companies.map(c => /*#__PURE__*/React.createElement(Marker, {\n    position: {\n      lat: parseFloat(String(c['Latitude'])),\n      lng: parseFloat(String(c['Longitude']))\n    },\n    icon: {\n      url: \"https://avatars3.githubusercontent.com/u/10436464?s=60&u=228255a0b6be47196415a3f2a55c06719089cb89&v=4\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 40\n    }\n  })))));\n  return (\n    /*#__PURE__*/\n\n    /*<div className=\"map-screen\">*/\n\n    /* <iframe\n      width=\"100%\"\n      height=\"100%\"\n      style={{border:0}}\n      src=\"https://www.google.com/maps/embed/v1/place?key=API_KEY\n        &q=Space+Needle,Seattle+WA\">\n    </iframe> */\n\n    /* <GoogleMapReact\n      bootstrapURLKeys={{ key: 'gme-samsungsds' }}\n      defaultCenter={{lat: 59.95, lng: 30.33}}\n      defaultZoom={11}\n    > */\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MyMapComponent, {\n      className: \"map-screen\",\n      isMarkerShown: true,\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\",\n      loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100%`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 27\n        }\n      }),\n      containerElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100vh`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 29\n        }\n      }),\n      mapElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100%`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 23\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Filter, {\n      onSubmit: () => {},\n      loading: loading,\n      companies: companies,\n      searchLocation: searchLocation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(MapLegend, {\n      isOpened: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(MapRegionIndicator, {\n      region: region,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }))\n  );\n}\n\nexport default MapScreen;","map":{"version":3,"sources":["/home/yuri/Freelance/Clients/Cheil/seace-qa/src/MapScreen.tsx"],"names":["React","useState","useEffect","Filter","MapLegend","MapRegionIndicator","withScriptjs","withGoogleMap","GoogleMap","Marker","GoogleSpreadsheet","require","doc","REGION_TO_SHEET_MAP","MapScreen","region","setRegion","companies","setCompanies","loading","setLoading","searchLocation","setSearchLocation","lat","lon","fetchGoogleSheet","useServiceAccountAuth","fetchCompaniesForRegion","loadInfo","console","log","title","sheet","sheetsByIndex","rows","getRows","error","MyMapComponent","props","lng","map","c","parseFloat","String","url","height"],"mappings":"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","sourcesContent":["/// @ts-nocheck\nimport React, { useState, useEffect } from 'react';\nimport './MapScreen.css';\nimport { Filter } from './components/MapFilter'\nimport { MapLegend } from './components/MapLegend'\nimport { MapRegionIndicator } from './components/MapRegionIndicator';\nimport { CompanyLayout } from './interfaces';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\"\n\nconst { GoogleSpreadsheet } = require('google-spreadsheet');\n \nconst doc = new GoogleSpreadsheet('1QtCGUCN-_xZPLYExN3btHeXphRi4VI-uGABA87cHj-M');\n\nconst REGION_TO_SHEET_MAP = {\n  'uk': 9\n}\n\nfunction MapScreen() {\n  const [region, setRegion] = useState<string>('uk');\n  const [companies, setCompanies] = useState<Array<CompanyLayout> | null>(null)\n  const [loading, setLoading] = useState<boolean>(false);\n  const [searchLocation, setSearchLocation] = useState<{lat: number, lon: number} | null>({lat: 50.8742724, lon: 0.6619475})\n\n  const fetchGoogleSheet = async () => {\n    await doc.useServiceAccountAuth(require('./SEACE Installer Locator-5a80e6b026be.json'));\n  }\n\n  // const onSearch = async (query: string) => {\n  //   const point = {lat: 51.5287714, lon: -0.2420237}\n  //   // const point = GMaps.getLocation(query)\n  // }\n\n  const fetchCompaniesForRegion = async (region: string) => {\n    try {\n      setLoading(true);\n      await doc.loadInfo();\n      console.log(doc.title);\n      const sheet = doc.sheetsByIndex[REGION_TO_SHEET_MAP['uk']]\n      const rows = await sheet.getRows();\n      setCompanies(rows);\n      console.log(rows);\n      \n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      console.error(error);\n    }\n  }\n\n  // Only once\n  useEffect(() => {fetchGoogleSheet()});\n\n  // Every region change\n  useEffect(() => {\n    fetchCompaniesForRegion(region);\n  }, [region]);\n\n  const MyMapComponent = withScriptjs(withGoogleMap((props) =>\n    <GoogleMap\n      defaultZoom={8}\n      defaultCenter={{ lat: 51.8266266, lng: -2.2714084 }}\n    >\n      {/* <Marker position={{ lat: 51.8266266, lng: -2.2714084 }} /> */}\n      {companies && companies.map(c => <Marker \n        position={{ lat: parseFloat(String(c['Latitude'])), lng: parseFloat(String(c['Longitude'])) }} \n        icon={{url: \"https://avatars3.githubusercontent.com/u/10436464?s=60&u=228255a0b6be47196415a3f2a55c06719089cb89&v=4\"}}\n      />)}\n      {/* <Marker position={{ lat: 51.8266266, lng: 150.644 }} /> */}\n    </GoogleMap>\n  ))\n\n  return (\n    /*<div className=\"map-screen\">*/\n      /* <iframe\n        width=\"100%\"\n        height=\"100%\"\n        style={{border:0}}\n        src=\"https://www.google.com/maps/embed/v1/place?key=API_KEY\n          &q=Space+Needle,Seattle+WA\">\n      </iframe> */\n      /* <GoogleMapReact\n        bootstrapURLKeys={{ key: 'gme-samsungsds' }}\n        defaultCenter={{lat: 59.95, lng: 30.33}}\n        defaultZoom={11}\n      > */\n      <div>\n        <MyMapComponent\n          className=\"map-screen\"\n          isMarkerShown={true}\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\n          loadingElement={<div style={{ height: `100%` }} />}\n          containerElement={<div style={{ height: `100vh` }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n        >\n        </MyMapComponent>\n        <Filter onSubmit={() => {}} loading={loading} companies={companies} searchLocation={searchLocation}/>\n        <MapLegend isOpened={true}/>\n        <MapRegionIndicator region={region}/>\n      </div>\n  );\n}\n\nexport default MapScreen;"]},"metadata":{},"sourceType":"module"}