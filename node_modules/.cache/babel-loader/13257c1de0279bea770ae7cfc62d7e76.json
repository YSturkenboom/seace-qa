{"ast":null,"code":"var _jsxFileName = \"/home/yuri/Freelance/Clients/Cheil/seace-qa/src/components/MapFilter.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Button, Radio, Card, RadioGroup, FormControlLabel } from '@material-ui/core';\nimport { Formik, Form, Field } from 'formik';\nimport { FilterTextField } from './form/FilterTextField';\nimport { LocationCard } from './form/LocationCard';\nimport { Search } from '@material-ui/icons';\n\nconst distanceToTarget = (location, locationTarget) => {\n  // TODO: Replace with maps distance\n  var a = location.lat - locationTarget.lat;\n  var b = location.lon - locationTarget.lon;\n  return Math.sqrt(a * a + b * b);\n};\n\nconst filterCompanies = (companies, distance, searchLocation, storeType, productType, searchType) => {\n  // Filter on type first for performance\n  let filteredCompanies = companies;\n\n  if (searchType === 'advanced') {\n    if (storeType === 'For home' || storeType === 'For business') {\n      filteredCompanies = filteredCompanies.filter(c => c['Installer Type'] === storeType || c['Installer Type'] === 'For home & business');\n    }\n\n    if (productType === 'Cooling' || productType === 'Heating') {\n      filteredCompanies = filteredCompanies.filter(c => c['Product Type'] === productType || c['Product Type'] === 'Cooling & Heating');\n    }\n  } // Calculate distance\n\n\n  filteredCompanies = filteredCompanies.map(c => {\n    console.log({\n      storeType: storeType,\n      type: c['Installer Type']\n    });\n    console.log({\n      lat: parseFloat(String(c['Latitude'])),\n      lon: parseFloat(String(c['Longitude']))\n    });\n    const location = {\n      lat: parseFloat(String(c['Latitude'])),\n      lon: parseFloat(String(c['Longitude']))\n    };\n    c.distanceToTarget = distanceToTarget(location, searchLocation);\n    return c;\n  }); // Filter on distance\n\n  return filteredCompanies.filter(c => c.distanceToTarget <= distance);\n};\n\nexport const Filter = ({\n  onSubmit,\n  loading,\n  companies,\n  searchLocation,\n  mapRef,\n  setActivePlace,\n  distanceType\n}) => {\n  const [distance, setDistance] = useState(10);\n  const [filteredCompanies, setFilteredCompanies] = useState(companies);\n  const [searchType, setSearchType] = useState('simple');\n  const [storeTypeDropDownIsOpen, setStoreTypeDropDownIsOpen] = useState(true);\n  const [productTypeDropDownIsOpen, setProductTypeDropDownIsOpen] = useState(true);\n  const [storeType, setStoreType] = useState('For home & business');\n  const [productType, setProductType] = useState('Cooling & Heating'); // Every filter change, or when companies load in\n\n  useEffect(() => {\n    if (companies && searchLocation) {\n      setFilteredCompanies(filterCompanies(companies, distance, searchLocation, storeType, productType, searchType));\n    }\n  }, [distance, searchLocation, companies, storeType, searchType, productType]);\n  return /*#__PURE__*/React.createElement(Card, {\n    raised: true,\n    className: \"map-search-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-search-box-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"map-search-box-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, \"Installer Locator\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, \"Information on this page is subject to change without prior notice. Please contact the installer directly for up to date information.\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-search-box-form-searchtype\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setSearchType(\"simple\"),\n    className: \"map-search-box-form-distance-btn\" + (searchType === 'simple' ? \" btn-active\" : ''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, \"Search\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setSearchType(\"advanced\"),\n    className: \"map-search-box-form-distance-btn\" + (searchType !== 'simple' ? \" btn-active\" : ''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, \"Advanced Search\")), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      address: \"\",\n      distanceInKilometers: 10\n    },\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, ({\n    values\n  }) => /*#__PURE__*/React.createElement(Form, {\n    className: \"map-search-box-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-search-box-form-search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    name: \"address\",\n    placeholder: \"Address or post code...\",\n    component: FilterTextField,\n    className: \"map-search-box-form-search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 41\n    }\n  }, \" \"))), /*#__PURE__*/React.createElement(RadioGroup, {\n    row: true,\n    onChange: e => setDistance(parseInt(e.target.value)),\n    \"aria-label\": \"position\",\n    name: \"position\",\n    defaultValue: \"top\",\n    className: \"map-search-box-form-distance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"10\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 50\n      }\n    }),\n    label: \"1 mile\",\n    labelPlacement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"20\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 50\n      }\n    }),\n    label: \"2 miles\",\n    labelPlacement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"50\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 50\n      }\n    }),\n    label: \"5 miles\",\n    labelPlacement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"100\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 50\n      }\n    }),\n    label: \"10 miles\",\n    labelPlacement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 37\n    }\n  }))))), searchType === 'advanced' && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-search-box-advanced\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-search-box-advanced-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 25\n    }\n  }, \"Store Type\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setStoreTypeDropDownIsOpen(!storeTypeDropDownIsOpen),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 25\n    }\n  }, storeTypeDropDownIsOpen ? '-' : '+')), storeTypeDropDownIsOpen && /*#__PURE__*/React.createElement(RadioGroup, {\n    onChange: e => setStoreType(e.target.value),\n    \"aria-label\": \"position\",\n    name: \"position\",\n    defaultValue: \"For home and business\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"For home\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 42\n      }\n    }),\n    label: \"For Home\",\n    labelPlacement: \"end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"For business\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 42\n      }\n    }),\n    label: \"For Business\",\n    labelPlacement: \"end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"For home & business\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 42\n      }\n    }),\n    label: \"For Home & Business\",\n    labelPlacement: \"end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-search-box-advanced-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 25\n    }\n  }, \"Product Type\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setProductTypeDropDownIsOpen(!productTypeDropDownIsOpen),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 25\n    }\n  }, productTypeDropDownIsOpen ? '-' : '+')), productTypeDropDownIsOpen && /*#__PURE__*/React.createElement(RadioGroup, {\n    onChange: e => setProductType(e.target.value),\n    \"aria-label\": \"position\",\n    name: \"position\",\n    defaultValue: \"Cooling & Heating\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"Cooling\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 42\n      }\n    }),\n    label: \"Cooling\",\n    labelPlacement: \"end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"Heating\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 42\n      }\n    }),\n    label: \"Heating\",\n    labelPlacement: \"end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"Cooling & Heating\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 42\n      }\n    }),\n    label: \"Cooling & Heating\",\n    labelPlacement: \"end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-search-box-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }\n  }, loading ? 'Loading...' : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 21\n    }\n  }, filteredCompanies ? filteredCompanies.map(c => /*#__PURE__*/React.createElement(LocationCard, {\n    name: c['Company name'],\n    telephone: c['Phone number'],\n    address: c['Street Address'],\n    distance: c.distanceToTarget,\n    distanceType: distanceType,\n    mapRef: mapRef,\n    lat: parseFloat(String(c['Latitude'])),\n    lon: parseFloat(String(c['Longitude'])),\n    setActivePlace: setActivePlace,\n    installerType: c['Installer Type'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 29\n    }\n  })) : \"No installers found. Please broaden your search criteria\")));\n};\n/* <p>Text</p>\n<div>\n    <button onClick={}>Search</button>\n    <button>Advanced search</button>\n</div>\n<input onChange={(e) => setQuery(e.target.value)} value={query} placeholder={'Postcode or address...'} /> */","map":{"version":3,"sources":["/home/yuri/Freelance/Clients/Cheil/seace-qa/src/components/MapFilter.tsx"],"names":["React","useState","useEffect","Button","Radio","Card","RadioGroup","FormControlLabel","Formik","Form","Field","FilterTextField","LocationCard","Search","distanceToTarget","location","locationTarget","a","lat","b","lon","Math","sqrt","filterCompanies","companies","distance","searchLocation","storeType","productType","searchType","filteredCompanies","filter","c","map","console","log","type","parseFloat","String","Filter","onSubmit","loading","mapRef","setActivePlace","distanceType","setDistance","setFilteredCompanies","setSearchType","storeTypeDropDownIsOpen","setStoreTypeDropDownIsOpen","productTypeDropDownIsOpen","setProductTypeDropDownIsOpen","setStoreType","setProductType","address","distanceInKilometers","values","e","parseInt","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, Radio, Card, RadioGroup, FormControlLabel } from '@material-ui/core';\nimport { Formik, Form, Field } from 'formik';\nimport { FilterTextField } from './form/FilterTextField';\nimport { LocationCard } from './form/LocationCard';\nimport { Search } from '@material-ui/icons';\nimport { CompanyLayout, LocationLayout } from '../interfaces';\nimport { GoogleMap } from \"react-google-maps\"\n\n\ninterface Values {\n    address: string;\n    distanceInKilometers: number;\n}\n  \ninterface Props {\n    onSubmit: (values: Values) => void;\n    companies: Array<CompanyLayout> | null;\n    loading: boolean;\n    searchLocation: LocationLayout | null;\n    mapRef: React.RefObject<GoogleMap>;\n    setActivePlace: React.Dispatch<React.SetStateAction<string | null | undefined>>;\n    distanceType: 'km' | 'mile';\n}\n\nconst distanceToTarget = (location: LocationLayout, locationTarget: LocationLayout) => {\n\n    // TODO: Replace with maps distance\n    var a = location.lat - locationTarget.lat;\n    var b = location.lon - locationTarget.lon;    \n    return Math.sqrt( a*a + b*b );\n};\n\nconst filterCompanies = (companies: Array<CompanyLayout>, distance: number, searchLocation: LocationLayout, storeType: string, productType: string, searchType: string): Array<CompanyLayout> => {\n    // Filter on type first for performance\n    let filteredCompanies = companies\n    if (searchType === 'advanced') {\n        if (storeType === 'For home' || storeType === 'For business') {\n            filteredCompanies =  filteredCompanies.filter(c => c['Installer Type'] === storeType || c['Installer Type'] === 'For home & business');\n        }\n        if (productType === 'Cooling' || productType === 'Heating') {\n            filteredCompanies =  filteredCompanies.filter(c => c['Product Type'] === productType || c['Product Type'] === 'Cooling & Heating');\n        }\n    }\n\n    // Calculate distance\n    filteredCompanies = filteredCompanies.map(c => {\n        console.log({storeType: storeType, type: c['Installer Type']});\n        console.log({lat: parseFloat(String(c['Latitude'])), lon: parseFloat(String(c['Longitude']))});\n        \n        const location = {\n            lat: parseFloat(String(c['Latitude'])),\n            lon: parseFloat(String(c['Longitude']))\n        }\n        c.distanceToTarget = distanceToTarget(location, searchLocation);\n        return c;\n    })\n\n    // Filter on distance\n\n    return filteredCompanies.filter(c => c.distanceToTarget <= distance);\n}\n\nexport const Filter: React.FC<Props> = ({ onSubmit, loading, companies, searchLocation, mapRef, setActivePlace, distanceType }) => {\n    const [distance, setDistance] = useState<number>(10);\n    const [filteredCompanies, setFilteredCompanies] = useState(companies);\n    const [searchType, setSearchType] = useState<'simple' | 'advanced'>('simple');\n    const [storeTypeDropDownIsOpen, setStoreTypeDropDownIsOpen] = useState<boolean>(true);\n    const [productTypeDropDownIsOpen, setProductTypeDropDownIsOpen] = useState<boolean>(true);\n    const [storeType, setStoreType] = useState<string>('For home & business')\n    const [productType, setProductType] = useState<string>('Cooling & Heating');\n\n    // Every filter change, or when companies load in\n    useEffect(() => {\n        if (companies && searchLocation) {\n            setFilteredCompanies(filterCompanies(companies, distance, searchLocation, storeType, productType, searchType));\n        }\n    }, [distance, searchLocation, companies, storeType, searchType, productType]);\n\n    return (\n        <Card raised className=\"map-search-box\">\n            <div className=\"map-search-box-header\">\n                <h1 className=\"map-search-box-heading\">Installer Locator</h1>\n                <p>Information on this page is subject to change without prior notice. Please contact the installer directly for up to date information.</p>\n            </div>\n            \n            <div>\n                <div className=\"map-search-box-form-searchtype\">\n                    <Button \n                        onClick={() => setSearchType(\"simple\")}\n                        className={\"map-search-box-form-distance-btn\" + (searchType === 'simple' ? \" btn-active\" : '')}\n                    >\n                        Search\n                    </Button>\n                    <Button\n                        onClick={() => setSearchType(\"advanced\")}\n                        className={\"map-search-box-form-distance-btn\" + (searchType !== 'simple' ? \" btn-active\" : '')}\n                    >\n                        Advanced Search\n                    </Button>\n                </div>\n\n                <Formik \n                    initialValues={{\n                        address: \"\",\n                        distanceInKilometers: 10,\n                    }}\n                    onSubmit={onSubmit}\n                >\n                    {({ values }) => (\n                        <Form className=\"map-search-box-form\">\n                                <div className=\"map-search-box-form-search\">\n                                    <Field\n                                        name=\"address\"\n                                        placeholder=\"Address or post code...\"\n                                        component={FilterTextField}\n                                        className=\"map-search-box-form-search\"\n                                    />\n                                    <Button type=\"submit\">\n                                        <Search> </Search>\n                                    </Button>\n                                </div>\n\n                                <RadioGroup row onChange={e => setDistance(parseInt(e.target.value))}  aria-label=\"position\" name=\"position\" defaultValue=\"top\" className=\"map-search-box-form-distance\">\n                                    <FormControlLabel\n                                        value=\"10\"\n                                        control={<Radio color=\"primary\" />}\n                                        label=\"1 mile\"\n                                        labelPlacement=\"top\"\n                                    />\n                                    <FormControlLabel\n                                        value=\"20\"\n                                        control={<Radio color=\"primary\" />}\n                                        label=\"2 miles\"\n                                        labelPlacement=\"top\"\n                                    />\n                                    <FormControlLabel\n                                        value=\"50\"\n                                        control={<Radio color=\"primary\" />}\n                                        label=\"5 miles\"\n                                        labelPlacement=\"top\"\n                                    />\n                                    <FormControlLabel\n                                        value=\"100\"\n                                        control={<Radio color=\"primary\" />}\n                                        label=\"10 miles\"\n                                        labelPlacement=\"top\"\n                                    />\n                                </RadioGroup>\n                        </Form>\n                    )}\n                    \n                </Formik>\n            </div>\n\n            {searchType === 'advanced' &&\n                <div className=\"map-search-box-advanced\">\n                    <div className=\"map-search-box-advanced-header\">\n                        <p>Store Type</p>\n                        <Button onClick={() => setStoreTypeDropDownIsOpen(!storeTypeDropDownIsOpen)}>\n                            {storeTypeDropDownIsOpen ? '-' : '+'}\n                        </Button>\n                    </div>\n                    {storeTypeDropDownIsOpen &&\n                        <RadioGroup onChange={e => setStoreType(e.target.value)} aria-label=\"position\" name=\"position\" defaultValue=\"For home and business\">\n                            <FormControlLabel\n                                value=\"For home\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"For Home\"\n                                labelPlacement=\"end\"\n                            />\n                            <FormControlLabel\n                                value=\"For business\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"For Business\"\n                                labelPlacement=\"end\"\n                            />\n                            <FormControlLabel\n                                value='For home & business'\n                                control={<Radio color=\"primary\" />}\n                                label=\"For Home & Business\"\n                                labelPlacement=\"end\"\n                            />\n                        </RadioGroup>\n                    }\n                    <div className=\"map-search-box-advanced-header\">\n                        <p>Product Type</p>\n                        <Button onClick={() => setProductTypeDropDownIsOpen(!productTypeDropDownIsOpen)}>\n                            {productTypeDropDownIsOpen ? '-' : '+'}\n                        </Button>\n                    </div>\n                    {productTypeDropDownIsOpen &&\n                        <RadioGroup onChange={e => setProductType(e.target.value)} aria-label=\"position\" name=\"position\" defaultValue=\"Cooling & Heating\">\n                            <FormControlLabel\n                                value=\"Cooling\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"Cooling\"\n                                labelPlacement=\"end\"\n                            />\n                            <FormControlLabel\n                                value=\"Heating\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"Heating\"\n                                labelPlacement=\"end\"\n                            />\n                            <FormControlLabel\n                                value='Cooling & Heating'\n                                control={<Radio color=\"primary\" />}\n                                label=\"Cooling & Heating\"\n                                labelPlacement=\"end\"\n                            />\n                        </RadioGroup>\n                    }\n            </div>\n            }\n\n            <div className=\"map-search-box-footer\">\n                {loading ? (\n                    'Loading...'\n                ) : (\n                    <div>\n                        {filteredCompanies ? filteredCompanies.map(c =>\n                            <LocationCard\n                                name={c['Company name']}\n                                telephone={c['Phone number']}\n                                address={c['Street Address']}\n                                distance={c.distanceToTarget}\n                                distanceType={distanceType}\n                                mapRef={mapRef}\n                                lat={parseFloat(String(c['Latitude']))}\n                                lon={parseFloat(String(c['Longitude']))}\n                                setActivePlace={setActivePlace}\n                                installerType={c['Installer Type']}\n                            />\n                        ) : \"No installers found. Please broaden your search criteria\"}\n                    </div>\n                )}\n            </div>\n        </Card>\n    );\n}\n\n            /* <p>Text</p>\n            <div>\n                <button onClick={}>Search</button>\n                <button>Advanced search</button>\n            </div>\n            <input onChange={(e) => setQuery(e.target.value)} value={query} placeholder={'Postcode or address...'} /> */"]},"metadata":{},"sourceType":"module"}