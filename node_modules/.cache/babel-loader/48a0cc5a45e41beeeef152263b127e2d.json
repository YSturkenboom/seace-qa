{"ast":null,"code":"var _jsxFileName=\"/home/yuri/Freelance/Clients/Cheil/SEACE_Installer_Locator/src/MapScreen.tsx\";import React,{useState,useEffect}from'react';import'./MapScreen.css';import{Filter}from'./components/MapFilter';import{MapLegend}from'./components/MapLegend';import{MapRegionIndicator}from'./components/MapRegionIndicator';const{GoogleSpreadsheet}=require('google-spreadsheet');const doc=new GoogleSpreadsheet('1QtCGUCN-_xZPLYExN3btHeXphRi4VI-uGABA87cHj-M');const REGION_TO_SHEET_MAP={'uk':9};function MapScreen(){const[region,setRegion]=useState('uk');const[companies,setCompanies]=useState(null);const[loading,setLoading]=useState(false);const[searchLocation,setSearchLocation]=useState({lat:50.8742724,lon:0.6619475});const fetchGoogleSheet=async()=>{await doc.useServiceAccountAuth(require('./SEACE Installer Locator-5a80e6b026be.json'));};// const onSearch = async (query: string) => {\n//   const point = {lat: 51.5287714, lon: -0.2420237}\n//   // const point = GMaps.getLocation(query)\n// }\nconst fetchCompaniesForRegion=async region=>{try{setLoading(true);await doc.loadInfo();console.log(doc.title);const sheet=doc.sheetsByIndex[REGION_TO_SHEET_MAP['uk']];const rows=await sheet.getRows({limit:25});setCompanies(rows);console.log(rows);setLoading(false);}catch(error){setLoading(false);console.error(error);}};// Only once\nuseEffect(()=>{fetchGoogleSheet();});// Every region change\nuseEffect(()=>{fetchCompaniesForRegion(region);},[region]);return/*#__PURE__*/React.createElement(\"div\",{className:\"map-screen\",__self:this,__source:{fileName:_jsxFileName,lineNumber:57,columnNumber:5}},/*#__PURE__*/React.createElement(Filter,{onSubmit:()=>{},loading:loading,companies:companies,searchLocation:searchLocation,__self:this,__source:{fileName:_jsxFileName,lineNumber:65,columnNumber:7}}),/*#__PURE__*/React.createElement(MapLegend,{isOpened:true,__self:this,__source:{fileName:_jsxFileName,lineNumber:66,columnNumber:7}}),/*#__PURE__*/React.createElement(MapRegionIndicator,{region:region,__self:this,__source:{fileName:_jsxFileName,lineNumber:67,columnNumber:7}}));}export default MapScreen;","map":{"version":3,"sources":["/home/yuri/Freelance/Clients/Cheil/SEACE_Installer_Locator/src/MapScreen.tsx"],"names":["React","useState","useEffect","Filter","MapLegend","MapRegionIndicator","GoogleSpreadsheet","require","doc","REGION_TO_SHEET_MAP","MapScreen","region","setRegion","companies","setCompanies","loading","setLoading","searchLocation","setSearchLocation","lat","lon","fetchGoogleSheet","useServiceAccountAuth","fetchCompaniesForRegion","loadInfo","console","log","title","sheet","sheetsByIndex","rows","getRows","limit","error"],"mappings":"gGAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAO,iBAAP,CACA,OAASC,MAAT,KAAuB,wBAAvB,CACA,OAASC,SAAT,KAA0B,wBAA1B,CACA,OAASC,kBAAT,KAAmC,iCAAnC,CAGA,KAAM,CAAEC,iBAAF,EAAwBC,OAAO,CAAC,oBAAD,CAArC,CAEA,KAAMC,CAAAA,GAAG,CAAG,GAAIF,CAAAA,iBAAJ,CAAsB,8CAAtB,CAAZ,CAEA,KAAMG,CAAAA,mBAAmB,CAAG,CAC1B,KAAM,CADoB,CAA5B,CAIA,QAASC,CAAAA,SAAT,EAAqB,CACnB,KAAM,CAACC,MAAD,CAASC,SAAT,EAAsBX,QAAQ,CAAS,IAAT,CAApC,CACA,KAAM,CAACY,SAAD,CAAYC,YAAZ,EAA4Bb,QAAQ,CAA8B,IAA9B,CAA1C,CACA,KAAM,CAACc,OAAD,CAAUC,UAAV,EAAwBf,QAAQ,CAAU,KAAV,CAAtC,CACA,KAAM,CAACgB,cAAD,CAAiBC,iBAAjB,EAAsCjB,QAAQ,CAAoC,CAACkB,GAAG,CAAE,UAAN,CAAkBC,GAAG,CAAE,SAAvB,CAApC,CAApD,CAEA,KAAMC,CAAAA,gBAAgB,CAAG,SAAY,CACnC,KAAMb,CAAAA,GAAG,CAACc,qBAAJ,CAA0Bf,OAAO,CAAC,6CAAD,CAAjC,CAAN,CACD,CAFD,CAIA;AACA;AACA;AACA;AAEA,KAAMgB,CAAAA,uBAAuB,CAAG,KAAOZ,CAAAA,MAAP,EAA0B,CACxD,GAAI,CACFK,UAAU,CAAC,IAAD,CAAV,CACA,KAAMR,CAAAA,GAAG,CAACgB,QAAJ,EAAN,CACAC,OAAO,CAACC,GAAR,CAAYlB,GAAG,CAACmB,KAAhB,EACA,KAAMC,CAAAA,KAAK,CAAGpB,GAAG,CAACqB,aAAJ,CAAkBpB,mBAAmB,CAAC,IAAD,CAArC,CAAd,CACA,KAAMqB,CAAAA,IAAI,CAAG,KAAMF,CAAAA,KAAK,CAACG,OAAN,CAAc,CAAEC,KAAK,CAAE,EAAT,CAAd,CAAnB,CACAlB,YAAY,CAACgB,IAAD,CAAZ,CACAL,OAAO,CAACC,GAAR,CAAYI,IAAZ,EAEAd,UAAU,CAAC,KAAD,CAAV,CACD,CAAC,MAAOiB,KAAP,CAAc,CACdjB,UAAU,CAAC,KAAD,CAAV,CACAS,OAAO,CAACQ,KAAR,CAAcA,KAAd,EACD,CACF,CAfD,CAiBA;AACA/B,SAAS,CAAC,IAAM,CAACmB,gBAAgB,GAAG,CAA3B,CAAT,CAEA;AACAnB,SAAS,CAAC,IAAM,CACdqB,uBAAuB,CAACZ,MAAD,CAAvB,CACD,CAFQ,CAEN,CAACA,MAAD,CAFM,CAAT,CAIA,mBACE,2BAAK,SAAS,CAAC,YAAf,yFAQE,oBAAC,MAAD,EAAQ,QAAQ,CAAE,IAAM,CAAE,CAA1B,CAA4B,OAAO,CAAEI,OAArC,CAA8C,SAAS,CAAEF,SAAzD,CAAoE,cAAc,CAAEI,cAApF,4EARF,cASE,oBAAC,SAAD,EAAW,QAAQ,CAAE,IAArB,4EATF,cAUE,oBAAC,kBAAD,EAAoB,MAAM,CAAEN,MAA5B,4EAVF,CADF,CAcD,CAED,cAAeD,CAAAA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './MapScreen.css';\nimport { Filter } from './components/MapFilter'\nimport { MapLegend } from './components/MapLegend'\nimport { MapRegionIndicator } from './components/MapRegionIndicator';\nimport { CompanyLayout } from './interfaces'\n\nconst { GoogleSpreadsheet } = require('google-spreadsheet');\n \nconst doc = new GoogleSpreadsheet('1QtCGUCN-_xZPLYExN3btHeXphRi4VI-uGABA87cHj-M');\n\nconst REGION_TO_SHEET_MAP = {\n  'uk': 9\n}\n\nfunction MapScreen() {\n  const [region, setRegion] = useState<string>('uk');\n  const [companies, setCompanies] = useState<Array<CompanyLayout> | null>(null)\n  const [loading, setLoading] = useState<boolean>(false);\n  const [searchLocation, setSearchLocation] = useState<{lat: number, lon: number} | null>({lat: 50.8742724, lon: 0.6619475})\n\n  const fetchGoogleSheet = async () => {\n    await doc.useServiceAccountAuth(require('./SEACE Installer Locator-5a80e6b026be.json'));\n  }\n\n  // const onSearch = async (query: string) => {\n  //   const point = {lat: 51.5287714, lon: -0.2420237}\n  //   // const point = GMaps.getLocation(query)\n  // }\n\n  const fetchCompaniesForRegion = async (region: string) => {\n    try {\n      setLoading(true);\n      await doc.loadInfo();\n      console.log(doc.title);\n      const sheet = doc.sheetsByIndex[REGION_TO_SHEET_MAP['uk']]\n      const rows = await sheet.getRows({ limit: 25 });\n      setCompanies(rows);\n      console.log(rows);\n      \n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      console.error(error);\n    }\n  }\n\n  // Only once\n  useEffect(() => {fetchGoogleSheet()});\n\n  // Every region change\n  useEffect(() => {\n    fetchCompaniesForRegion(region);\n  }, [region]);\n\n  return (\n    <div className=\"map-screen\">\n      {/* <iframe\n        width=\"100%\"\n        height=\"100%\"\n        style={{border:0}}\n        src=\"https://www.google.com/maps/embed/v1/place?key=API_KEY\n          &q=Space+Needle,Seattle+WA\">\n      </iframe> */}\n      <Filter onSubmit={() => {}} loading={loading} companies={companies} searchLocation={searchLocation}/>\n      <MapLegend isOpened={true}/>\n      <MapRegionIndicator region={region}/>\n    </div>\n  );\n}\n\nexport default MapScreen;"]},"metadata":{},"sourceType":"module"}