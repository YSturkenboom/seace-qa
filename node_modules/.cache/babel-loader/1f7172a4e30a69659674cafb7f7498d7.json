{"ast":null,"code":"var _jsxFileName = \"/home/yuri/Freelance/Clients/Cheil/seace-qa/src/MapScreen.tsx\";\n/// @ts-nocheck\nimport React, { useState, useEffect, Fragment } from 'react';\nimport './MapScreen.css';\nimport { Filter } from './components/MapFilter';\nimport { MapLegend } from './components/MapLegend';\nimport { MapRegionIndicator } from './components/MapRegionIndicator';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\";\n\nconst {\n  GoogleSpreadsheet\n} = require('google-spreadsheet');\n\nconst doc = new GoogleSpreadsheet('1QtCGUCN-_xZPLYExN3btHeXphRi4VI-uGABA87cHj-M');\nconst REGION_TO_SHEET_MAP = {\n  'Spain': 1,\n  'Sweden': 2,\n  'Denmark': 3,\n  'Finland': 4,\n  'Italy': 5,\n  'Norway': 6,\n  'SEROM': 7,\n  'France': 8,\n  'UK': 9,\n  'Greece': 10,\n  'Poland': 11,\n  'Czech & Slovakia': 12,\n  'Portugal': 13,\n  'Hungary': 14,\n  'SEAD': 15,\n  'SEB': 16\n};\nconst REGION_TO_COORDS_MAP = {\n  'Spain': {\n    lat: 40.1213227,\n    lon: -8.2126345\n  },\n  'Sweden': {\n    lat: 61.7408759,\n    lon: 8.4226912\n  },\n  'Denmark': {\n    lat: 56.2097048,\n    lon: 9.2950757\n  },\n  'Finland': {\n    lat: 64.6222352,\n    lon: 17.0720047\n  },\n  'Italy': {\n    lat: 41.2031887,\n    lon: 8.2129043\n  },\n  'Norway': {\n    lat: 64.2853881,\n    lon: 8.7594611\n  },\n  'SEROM': {\n    lat: 44.3937893,\n    lon: 23.84318377\n  },\n  'France': {\n    lat: 46.1309898,\n    lon: -2.4457894\n  },\n  'UK': {\n    lat: 54.217289,\n    lon: -13.4466842\n  },\n  'Greece': {\n    lat: 38.1244038,\n    lon: 22.2327838\n  },\n  'Poland': {\n    lat: 51.8680396,\n    lon: 14.63899\n  },\n  'Czech & Slovakia': {\n    lat: 49.2061586,\n    lon: 15.9140313\n  },\n  'Portugal': {\n    lat: 39.5601752,\n    lon: -8.8019426\n  },\n  'Hungary': {\n    lat: 47.155667,\n    lon: 18.3812087\n  },\n  'SEAD': {\n    lat: 43.7446054,\n    lon: 16.788233\n  },\n  'SEB': {\n    lat: 56.7993995,\n    lon: 22.503913\n  }\n};\n\nfunction MapScreen() {\n  const [region, setRegion] = useState('UK');\n  const [companies, setCompanies] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [searchLocation, setSearchLocation] = useState({\n    lat: 50.8742724,\n    lon: 0.6619475\n  });\n  const [activePlace, setActivePlace] = useState();\n  const [filteredCompanies, setFilteredCompanies] = useState(companies);\n  const mapRef = React.createRef();\n\n  const fetchGoogleSheet = async () => {\n    await doc.useServiceAccountAuth(require('./SEACE Installer Locator-5a80e6b026be.json'));\n  }; // const onSearch = async (query: string) => {\n  //   const point = {lat: 51.5287714, lon: -0.2420237}\n  //   // const point = GMaps.getLocation(query)\n  // }\n\n\n  const fetchCompaniesForRegion = async region => {\n    try {\n      setLoading(true);\n      await doc.loadInfo();\n      const sheet = doc.sheetsByIndex[REGION_TO_SHEET_MAP[region]];\n      const rows = await sheet.getRows();\n      const centerCoords = REGION_TO_COORDS_MAP[region];\n      setCompanies(rows);\n      setSearchLocation(centerCoords);\n      console.log(rows);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      console.error(error);\n    }\n  }; // Only once\n\n\n  useEffect(() => {\n    fetchGoogleSheet();\n  }); // Every region change\n\n  useEffect(() => {\n    fetchCompaniesForRegion(region);\n  }, [region]); // Move the map to the new center when the target location changes\n\n  useEffect(mapRef => {\n    console.log('panning?');\n    mapRef && mapref.current && mapRef.current.panTo({\n      lat: parseFloat(searchLocation.lat),\n      lng: parseFloat(searchLocation.lat)\n    });\n  }, [searchLocation]); // Every filter change, or when companies load in\n\n  useEffect(() => {\n    if (companies && searchLocation) {\n      const filterCompanies = (companies, distance, searchLocation, storeType, productType, searchType) => {\n        // Filter on type first for performance\n        let filteredCompanies = companies;\n\n        if (searchType === 'advanced') {\n          if (storeType === 'For home' || storeType === 'For business') {\n            filteredCompanies = filteredCompanies.filter(c => c['Installer Type'] === storeType || c['Installer Type'] === 'For home & business');\n          }\n\n          if (productType === 'Cooling' || productType === 'Heating') {\n            filteredCompanies = filteredCompanies.filter(c => c['Product Type'] === productType || c['Product Type'] === 'Cooling & Heating');\n          }\n        } // Calculate distance\n\n\n        filteredCompanies = filteredCompanies.map(c => {\n          console.log({\n            storeType: storeType,\n            type: c['Installer Type']\n          });\n          console.log({\n            lat: parseFloat(String(c['Latitude'])),\n            lon: parseFloat(String(c['Longitude']))\n          });\n          const location = {\n            lat: parseFloat(String(c['Latitude'])),\n            lon: parseFloat(String(c['Longitude']))\n          };\n          c.distanceToTarget = distanceToTarget(location, searchLocation);\n          return c;\n        }); // Filter on distance\n\n        return filteredCompanies.filter(c => c.distanceToTarget <= distance);\n      };\n\n      setFilteredCompanies(filterCompanies(companies, distance, searchLocation, storeType, productType, searchType));\n    }\n  }, [searchLocation, companies]);\n  const MyMapComponent = withScriptjs(withGoogleMap(props => /*#__PURE__*/React.createElement(GoogleMap, {\n    defaultZoom: 8,\n    defaultCenter: {\n      lat: 51.8266266,\n      lng: -2.2714084\n    },\n    ref: mapRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, companies && companies.map((c, idx) => {\n    const productType = String(c['Product Type']).toLowerCase();\n    const position = {\n      lat: parseFloat(String(c['Latitude'])),\n      lng: parseFloat(String(c['Longitude']))\n    };\n    const installerType = String(c['Installer Type']); // Select icon based on the installer type\n\n    let icon;\n\n    if (installerType === 'For home') {\n      icon = require('./home.svg');\n    } else if (installerType === 'For business') {\n      icon = require('./biz.svg');\n    } else {\n      icon = require('./both.svg');\n    }\n\n    return /*#__PURE__*/React.createElement(Marker, {\n      position: position,\n      onClick: () => {\n        mapRef.current.panTo({\n          lat: parseFloat(String(c['Latitude'])),\n          lng: parseFloat(String(c['Longitude']))\n        });\n        setActivePlace(c['Company name']);\n      },\n      icon: {\n        url: icon\n      },\n      label: {\n        color: 'white',\n        fontSize: '16px',\n        paddingBottom: '150px',\n        text: (idx + 1).toString()\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 16\n      }\n    }, activePlace && activePlace === c['Company name'] && /*#__PURE__*/React.createElement(InfoWindow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }\n    }, c['Company name']), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, c['Street Address']), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    }, c['City']), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }\n    }, c['Installer Type']), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }, c['Website']), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }\n    }, \"Contact Name: \", c['Contact Name']), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }\n    }, c['Email']), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }, c['Phone number']))));\n  }))));\n  return (\n    /*#__PURE__*/\n\n    /*<div className=\"map-screen\">*/\n\n    /* <iframe\n      width=\"100%\"\n      height=\"100%\"\n      style={{border:0}}\n      src=\"https://www.google.com/maps/embed/v1/place?key=API_KEY\n        &q=Space+Needle,Seattle+WA\">\n    </iframe> */\n\n    /* <GoogleMapReact\n      bootstrapURLKeys={{ key: 'gme-samsungsds' }}\n      defaultCenter={{lat: 59.95, lng: 30.33}}\n      defaultZoom={11}\n    > */\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MyMapComponent, {\n      className: \"map-screen\",\n      isMarkerShown: true,\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?client=gme-samsung-sds&v=3.exp&libraries=geometry,drawing,places\",\n      loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100%`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 27\n        }\n      }),\n      containerElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100vh`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 29\n        }\n      }),\n      mapElement: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: `100%`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 23\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Filter, {\n      onSubmit: () => {},\n      loading: loading,\n      companies: companies,\n      searchLocation: searchLocation,\n      mapRef: mapRef,\n      setActivePlace: setActivePlace,\n      filterCompanies: filterCcompsanies,\n      filterCo: setFilteredCompanies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(MapLegend, {\n      isOpened: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(MapRegionIndicator, {\n      region: region,\n      setRegion: setRegion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }\n    }))\n  );\n}\n\nexport default MapScreen;","map":{"version":3,"sources":["/home/yuri/Freelance/Clients/Cheil/seace-qa/src/MapScreen.tsx"],"names":["React","useState","useEffect","Fragment","Filter","MapLegend","MapRegionIndicator","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","GoogleSpreadsheet","require","doc","REGION_TO_SHEET_MAP","REGION_TO_COORDS_MAP","lat","lon","MapScreen","region","setRegion","companies","setCompanies","loading","setLoading","searchLocation","setSearchLocation","activePlace","setActivePlace","filteredCompanies","setFilteredCompanies","mapRef","createRef","fetchGoogleSheet","useServiceAccountAuth","fetchCompaniesForRegion","loadInfo","sheet","sheetsByIndex","rows","getRows","centerCoords","console","log","error","mapref","current","panTo","parseFloat","lng","filterCompanies","distance","storeType","productType","searchType","filter","c","map","type","String","location","distanceToTarget","MyMapComponent","props","idx","toLowerCase","position","installerType","icon","url","color","fontSize","paddingBottom","text","toString","height","filterCcompsanies"],"mappings":"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","sourcesContent":["/// @ts-nocheck\nimport React, { useState, useEffect, Fragment } from 'react';\nimport './MapScreen.css';\nimport { Filter } from './components/MapFilter'\nimport { MapLegend } from './components/MapLegend'\nimport { MapRegionIndicator } from './components/MapRegionIndicator';\nimport { CompanyLayout, LocationLayout } from './interfaces';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\"\nimport {ReactComponent as Home} from './home.svg';\nimport {ReactComponent as Biz} from './biz.svg';\nimport {ReactComponent as Both} from './both.svg';\nimport { renderToStaticMarkup } from 'react-dom/server';\n\nconst { GoogleSpreadsheet } = require('google-spreadsheet');\n \nconst doc = new GoogleSpreadsheet('1QtCGUCN-_xZPLYExN3btHeXphRi4VI-uGABA87cHj-M');\n\nconst REGION_TO_SHEET_MAP = {\n  'Spain': 1,\n  'Sweden': 2,\n  'Denmark': 3,\n  'Finland': 4,\n  'Italy': 5,\n  'Norway': 6,\n  'SEROM': 7,\n  'France': 8,\n  'UK': 9,\n  'Greece': 10,\n  'Poland': 11,\n  'Czech & Slovakia': 12,\n  'Portugal': 13,\n  'Hungary': 14,\n  'SEAD': 15,\n  'SEB': 16\n}\n\nconst REGION_TO_COORDS_MAP = {\n  'Spain': {lat: 40.1213227, lon: -8.2126345},\n  'Sweden': {lat: 61.7408759, lon: 8.4226912},\n  'Denmark': {lat: 56.2097048, lon: 9.2950757},\n  'Finland': {lat: 64.6222352, lon: 17.0720047},\n  'Italy': {lat: 41.2031887, lon: 8.2129043},\n  'Norway': {lat: 64.2853881, lon: 8.7594611},\n  'SEROM': {lat: 44.3937893, lon: 23.84318377},\n  'France': {lat: 46.1309898, lon: -2.4457894},\n  'UK': {lat: 54.217289, lon: -13.4466842},\n  'Greece': {lat: 38.1244038, lon: 22.2327838},\n  'Poland': {lat: 51.8680396, lon:14.63899},\n  'Czech & Slovakia': {lat: 49.2061586, lon: 15.9140313},\n  'Portugal': {lat: 39.5601752, lon: -8.8019426},\n  'Hungary': {lat: 47.155667, lon: 18.3812087},\n  'SEAD': {lat: 43.7446054, lon: 16.788233},\n  'SEB': {lat: 56.7993995, lon: 22.503913}\n}\n\nfunction MapScreen() {\n  const [region, setRegion] = useState<string>('UK');\n  const [companies, setCompanies] = useState<Array<CompanyLayout> | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [searchLocation, setSearchLocation] = useState<LocationLayout | null>({lat: 50.8742724, lon: 0.6619475})\n  const [activePlace, setActivePlace] = useState<string | null>();\n  const [filteredCompanies, setFilteredCompanies] = useState(companies);\n\n\n  const mapRef = React.createRef<React.RefObject<GoogleMap>>();\n  const fetchGoogleSheet = async () => {\n    await doc.useServiceAccountAuth(require('./SEACE Installer Locator-5a80e6b026be.json'));\n  }\n\n  // const onSearch = async (query: string) => {\n  //   const point = {lat: 51.5287714, lon: -0.2420237}\n  //   // const point = GMaps.getLocation(query)\n  // }\n\n  const fetchCompaniesForRegion = async (region: string) => {\n    try {\n      setLoading(true);\n      await doc.loadInfo();\n      const sheet = doc.sheetsByIndex[REGION_TO_SHEET_MAP[region]]\n      const rows = await sheet.getRows();\n      const centerCoords = REGION_TO_COORDS_MAP[region]\n      setCompanies(rows);\n      setSearchLocation(centerCoords);\n      \n      console.log(rows);\n      \n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      console.error(error);\n    }\n  }\n\n  // Only once\n  useEffect(() => {fetchGoogleSheet()});\n\n  // Every region change\n  useEffect(() => {\n    fetchCompaniesForRegion(region);\n  }, [region]);\n\n  // Move the map to the new center when the target location changes\n  useEffect((mapRef) => {\n    console.log('panning?');\n    \n    mapRef && mapref.current && mapRef.current.panTo({ lat: parseFloat(searchLocation.lat), lng: parseFloat(searchLocation.lat)});\n  }, [searchLocation])\n\n  // Every filter change, or when companies load in\n  useEffect(() => {\n    if (companies && searchLocation) {\n\n      const filterCompanies = (companies: Array<CompanyLayout>, distance: number, searchLocation: LocationLayout, storeType: string, productType: string, searchType: string): Array<CompanyLayout> => {\n        // Filter on type first for performance\n        let filteredCompanies = companies\n        if (searchType === 'advanced') {\n            if (storeType === 'For home' || storeType === 'For business') {\n                filteredCompanies =  filteredCompanies.filter(c => c['Installer Type'] === storeType || c['Installer Type'] === 'For home & business');\n            }\n            if (productType === 'Cooling' || productType === 'Heating') {\n                filteredCompanies =  filteredCompanies.filter(c => c['Product Type'] === productType || c['Product Type'] === 'Cooling & Heating');\n            }\n        }\n\n        // Calculate distance\n        filteredCompanies = filteredCompanies.map(c => {\n            console.log({storeType: storeType, type: c['Installer Type']});\n            console.log({lat: parseFloat(String(c['Latitude'])), lon: parseFloat(String(c['Longitude']))});\n            \n            const location = {\n                lat: parseFloat(String(c['Latitude'])),\n                lon: parseFloat(String(c['Longitude']))\n            }\n            c.distanceToTarget = distanceToTarget(location, searchLocation);\n            return c;\n        })\n\n        // Filter on distance\n\n        return filteredCompanies.filter(c => c.distanceToTarget <= distance);\n      }\n\n      setFilteredCompanies(filterCompanies(companies, distance, searchLocation, storeType, productType, searchType));\n    }\n}, [searchLocation, companies]);\n\n  const MyMapComponent = withScriptjs(withGoogleMap((props) =>\n    <GoogleMap\n      defaultZoom={8}\n      defaultCenter={{ lat: 51.8266266, lng: -2.2714084 }}\n      ref={mapRef}\n    >\n      {companies && companies.map((c, idx) => {\n        const productType = String(c['Product Type']).toLowerCase();\n        const position = { lat: parseFloat(String(c['Latitude'])), lng: parseFloat(String(c['Longitude'])) };\n        const installerType = String(c['Installer Type'])\n       \n        // Select icon based on the installer type\n        let icon;\n        if (installerType === 'For home') {\n          icon = require('./home.svg')\n        } else if (installerType === 'For business') {\n          icon = require('./biz.svg')\n        } else {\n          icon = require('./both.svg')\n        }\n\n        return <Marker \n          position={position} \n          onClick={() =>{\n            mapRef.current.panTo({ lat: parseFloat(String(c['Latitude'])), lng: parseFloat(String(c['Longitude'])) });\n            setActivePlace(c['Company name']);\n          }}\n          icon={{url: icon}}\n          label={{color: 'white', fontSize: '16px', paddingBottom: '150px', text: (idx+1).toString() }}\n        >\n          {/* If this place is active, show the popup with the place information */}\n          {activePlace && activePlace === c['Company name'] &&\n            <InfoWindow>\n              <Fragment>\n                <p>{c['Company name']}</p>\n                <p>{c['Street Address']}</p>\n                <p>{c['City']}</p>\n                <p>{c['Installer Type']}</p>\n                <p>{c['Website']}</p>\n                <p>Contact Name: {c['Contact Name']}</p>\n                <p>{c['Email']}</p>\n                <p>{c['Phone number']}</p>\n              </Fragment>\n            </InfoWindow>\n          }\n          \n        </Marker>\n      })}\n      {/* <Marker position={{ lat: 51.8266266, lng: 150.644 }} /> */}\n    </GoogleMap>\n  ))\n\n  return (\n    /*<div className=\"map-screen\">*/\n      /* <iframe\n        width=\"100%\"\n        height=\"100%\"\n        style={{border:0}}\n        src=\"https://www.google.com/maps/embed/v1/place?key=API_KEY\n          &q=Space+Needle,Seattle+WA\">\n      </iframe> */\n      /* <GoogleMapReact\n        bootstrapURLKeys={{ key: 'gme-samsungsds' }}\n        defaultCenter={{lat: 59.95, lng: 30.33}}\n        defaultZoom={11}\n      > */\n      <div>\n        <MyMapComponent\n          className=\"map-screen\"\n          isMarkerShown={true}\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?client=gme-samsung-sds&v=3.exp&libraries=geometry,drawing,places\"\n          loadingElement={<div style={{ height: `100%` }} />}\n          containerElement={<div style={{ height: `100vh` }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n        >\n        </MyMapComponent>\n        <Filter\n          onSubmit={() => {}}\n          loading={loading}\n          companies={companies}\n          searchLocation={searchLocation}\n          mapRef={mapRef}\n          setActivePlace={setActivePlace}\n          filterCompanies={filterCcompsanies}\n          filterCo={setFilteredCompanies}\n        />\n        <MapLegend isOpened={true}/>\n        <MapRegionIndicator region={region} setRegion={setRegion}/>\n      </div>\n  );\n}\n\nexport default MapScreen;"]},"metadata":{},"sourceType":"module"}